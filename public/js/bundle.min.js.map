{"version":3,"sources":["webpack:/webpack/bootstrap f0a163b0edc8587d5a57","webpack:///src/client/app.js","webpack:///src/client/application/AudioManager.js","webpack:///src/client/application/AssetManager.js","webpack:///src/client/application/KeyboardEventHandler.js","webpack:///src/client/graphics/2D/SpriteSheet.js","webpack:///src/client/graphics/2D/Animation.js"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","update","socket","emit","keyEventHandler","keyActionsRegister","window","requestAnimationFrame","draw","players","playerId","spritesLoaded","currentAnimation","ctx","clearRect","canvas","width","height","keys","forEach","key","player","viewport","areaId","animationLeft","animationRight","animationIdle","position","_x","_y","blocks","block","drawImage","assetManager","getAsset","material","x","lives","io","document","getElementById","_KeyboardEventHandler2","default","audioManager","_AudioManager2","_AssetManager2","spriteSheet","requestAnimFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","element","setTimeout","addEventListener","getContext","queueDownload","_SpriteSheet2","_Animation2","loadAll","playSound","textContent","_classCallCheck","instance","Constructor","TypeError","AudioManager","this","succesCount","errorCount","e","AudioContext","webkitAudioContext","alert","value","path","downloadQueue","length","managerInstance","item","load","request","XMLHttpRequest","responseType","bufferCache","response","buffer","done","sound","context","createBufferSource","undefined","arguments","loop","destination","start","Math","floor","duration","AssetManager","_this","img","src","cache","KeyboardEventHandler","initializeKeyHandler","initializeTouchHandler","event","evt","yDown","xDown","touches","clientX","preventDefault","yUp","clientY","yDiff","handlerInstance","handleTouchStart","SpriteSheet","frameHeight","Image","image","sequence","currentFrame","counter","frame","end","push","speed","col","frameWidth","row","framesPerRow"],"mappings":"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","file":"bundle.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f0a163b0edc8587d5a57","'use strict'\r\n\r\nimport AudioManager from './application/AudioManager'\r\nimport AssetManager from './application/AssetManager'\r\nimport KeyboardEventHandler from './application/KeyboardEventHandler'\r\nimport SpriteSheet from './graphics/2D/SpriteSheet'\r\nimport Animation from './graphics/2D/Animation'\r\n\r\nlet socket = io()\r\nlet canvas = document.getElementById('game')\r\nlet keyEventHandler = new KeyboardEventHandler(canvas)\r\nlet audioManager = new AudioManager() // TODO Combine audio manager with asset manager to avoid duplicate code\r\nlet assetManager = new AssetManager()\r\nlet playerId // player id is registered here on socket connection\r\nlet ctx // graphics context\r\nlet spritesLoaded = false // set to true when asset manager finishes to start drawing\r\nlet spriteSheet\r\nlet animationRight\r\nlet animationLeft\r\nlet animationIdle\r\nlet currentAnimation\r\n\r\n/**\r\n * Shim for animation loop.\r\n * Selects one that's available or uses fallback with setTimeout.\r\n */\r\nwindow.requestAnimFrame = (() => {\r\n  return window.requestAnimationFrame ||\r\n    window.webkitRequestAnimationFrame ||\r\n    window.mozRequestAnimationFrame ||\r\n    window.oRequestAnimationFrame ||\r\n    window.msRequestAnimationFrame ||\r\n    function (callback, element) {\r\n      window.setTimeout(callback, 1000 / 60)\r\n    }\r\n})()\r\n\r\n/**\r\n * Download all game assets.\r\n */\r\nfunction init () {\r\n  // check if canvas is supported by browser\r\n  if (canvas.getContext) {\r\n    socket.emit('new player')\r\n    ctx = canvas.getContext('2d')\r\n    // Add all sprites and music files to the download queue\r\n    audioManager.queueDownload('ambient', 'assets/audio/ambient/ambient.mp3')\r\n    audioManager.queueDownload('jump', 'assets/audio/effects/jump.wav')\r\n    assetManager.queueDownload('background', 'assets/textures/background.png')\r\n    assetManager.queueDownload('player', 'assets/textures/player.png')\r\n    assetManager.queueDownload('stone-block', 'assets/textures/stone-block.jpg')\r\n    assetManager.queueDownload('heart', 'assets/textures/heart.png')\r\n    spriteSheet = new SpriteSheet('assets/textures/test.png', 32, 64)\r\n    animationRight = new Animation(spriteSheet, 3, 3, 6)\r\n    animationLeft = new Animation(spriteSheet, 3, 3, 6)\r\n    animationIdle = new Animation(spriteSheet, 10, 0, 2)\r\n    currentAnimation = animationLeft\r\n    audioManager.loadAll(() => {\r\n      // Download all sprites\r\n      assetManager.loadAll(() => {\r\n        // Play ambient sound\r\n        audioManager.playSound('ambient', true)\r\n        update()\r\n        // Draw Background only once to improve performance\r\n        document.getElementById('background').getContext('2d').drawImage(assetManager.getAsset('background'), 0, 0, canvas.width, canvas.height)\r\n        // tells socket.on(state) that all sprites needed for drawing are downloaded\r\n        spritesLoaded = true\r\n      })\r\n    })\r\n  } else {\r\n    document.getElementById('unsupported').textContent = 'Please update your browser or download another one which supports HTML5'\r\n  }\r\n}\r\n\r\n/**\r\n * Sends user input to the server.\r\n */\r\nfunction update () {\r\n  socket.emit('movement', keyEventHandler.keyActionsRegister)\r\n  // Request new frame when ready. Allows the game to play in a loop in approximately 60fps\r\n  window.requestAnimationFrame(() => update())\r\n}\r\n\r\nfunction draw (players) {\r\n  if (playerId && players[playerId] && spritesLoaded) {\r\n    currentAnimation.update()\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\r\n    Object.keys(players).forEach(key => {\r\n      const player = players[key]\r\n      // Make sure to only draw players in the same area\r\n      if (player.viewport.areaId === players[playerId].viewport.areaId) {\r\n        if (player.keyActionsRegister['a']) {\r\n          currentAnimation = animationLeft\r\n        } else if (player.keyActionsRegister['d']) {\r\n          currentAnimation = animationRight\r\n        } else {\r\n          currentAnimation = animationIdle\r\n        }\r\n        currentAnimation.draw(ctx, player.position._x, player.position._y, player.width, player.height)\r\n      }\r\n    })\r\n    // Draw all blocks\r\n    players[playerId].viewport.blocks.forEach(block => {\r\n      ctx.drawImage(assetManager.getAsset(block.material.name), block.position._x, block.position._y, block.width, block.height)\r\n    })\r\n    // Display health\r\n    let x = canvas.width - 35\r\n    let y = 5\r\n    for (let i = 0; i < players[playerId].lives; i++) {\r\n      ctx.drawImage(assetManager.getAsset('heart'), x, y, 30, 30)\r\n      x -= 30\r\n    }\r\n    if (players[playerId].jumping) {\r\n      // audioManager.playSound('jump') TODO Currently fires multiple times. Find a way to only play when the last jump sound ended\r\n    }\r\n\r\n    // animation.draw(ctx, 12.5, 12.5, 50, 50)\r\n  }\r\n}\r\n\r\n/**\r\n * modern browser equivalent of jQuery $(document).ready()\r\n */\r\ndocument.addEventListener('DOMContentLoaded', init())\r\n\r\n/**\r\n * Initialize player id on socket connection\r\n */\r\nsocket.on('connect', () => {\r\n  // Tell server to add this player\r\n  socket.emit('new player')\r\n  // remember socket id to identify current player when drawing\r\n  playerId = socket.io.engine.id\r\n})\r\n\r\n/**\r\n * Listen to server sending objects to draw.\r\n * Contains the drawing loop\r\n */\r\nsocket.on('state', players => {\r\n  draw(players)\r\n})\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/app.js","/**\n * Audio asset manager.\n * TODO: Merge with AssetManager to eliminate duplicate code.\n *\n * @author Daniel Peters\n * @version 1.1\n */\nexport default class AudioManager {\n  constructor () {\n    this.bufferCache = []\n    this.downloadQueue = []\n    this.succesCount = 0\n    this.errorCount = 0\n\n    try {\n      // Fix for browsers using prefixes\n      window.AudioContext = window.AudioContext || window.webkitAudioContext\n      this.context = new AudioContext()\n    } catch (e) {\n      alert('Web Audio API is not supported in this browser')\n    }\n  }\n\n  /**\n   * Queue an audio file for download.\n   *\n   * @param {string} name name of the audio file\n   * @param {string} path location of the audio file\n   */\n  queueDownload (name, path) {\n    this.downloadQueue.push({name: name, path: path})\n  }\n\n  /**\n   * Download all files and execute callback function when done.\n   *\n   * @param callback function to be executed when downloading is done\n   */\n  loadAll (callback) {\n    if (this.downloadQueue.length === 0) {\n      callback()\n    }\n    let managerInstance = this\n    this.downloadQueue.forEach(item => {\n      managerInstance.load(item.name, item.path, callback)\n    })\n  }\n\n  /**\n   * Build an AJAX Request to load audio file into the buffer cache.\n   *\n   * @param name file name\n   * @param path location of the file\n   * @param callback function to execute on done\n   */\n  load (name, path, callback) {\n    let instance = this\n    let request = new XMLHttpRequest()\n\n    request.open('GET', path, true)\n    request.responseType = 'arraybuffer'\n\n    // Decode asynchronously\n    request.onload = function () {\n      instance.context.decodeAudioData(\n        request.response, buffer => {\n          instance.bufferCache[name] = buffer\n          instance.succesCount += 1\n\n          if (instance.done()) {\n            callback()\n          }\n        }\n      )\n    }\n\n    // Register error\n    request.onerror = function () {\n      instance.errorCount += 1\n\n      if (instance.done()) {\n        callback()\n      }\n    }\n    request.send()\n  }\n\n  /**\n   * Create an audio buffer source node from cached buffer.\n   * Send it to the destination of the audio context and play it.\n   *\n   * @param name filename\n   * @param loop set to true for looped sounds like ambient music\n   */\n  playSound (name, loop = false) {\n    let sound = this.context.createBufferSource()\n\n    sound.buffer = this.bufferCache[name]\n    sound.connect(this.context.destination)\n    if (loop) {\n      sound.loop = loop\n      sound.loopEnd = Math.floor(sound.buffer.duration)\n    }\n    sound.start(0)\n  }\n\n  /**\n   * Check if downloading is finished.\n   * @returns {boolean}\n   */\n  done () {\n    return this.downloadQueue.length === this.succesCount + this.errorCount\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/application/AudioManager.js","/**\n * Texture asset manager.\n * TODO: Merge with AudioManager to eliminate duplicate code.\n *\n * @author Daniel Peters\n * @version 1.1\n */\nexport default class AssetManager {\n  constructor () {\n    this.downloadQueue = []\n    this.cache = {}\n    this.succesCount = 0\n    this.errorCount = 0\n  }\n\n  /**\n   * Queue an image to download.\n   *\n   * @param {string} name name of file\n   * @param {string} path location of file\n   */\n  queueDownload (name, path) {\n    this.downloadQueue.push({name: name, path: path})\n  }\n\n  /**\n   * Download all queued items and execute the callback function ond finish.\n   *\n   * @param callback function go be executed on download end\n   */\n  loadAll (callback) {\n    if (this.downloadQueue.length === 0) {\n      callback()\n    }\n\n    let managerInstance = this\n    this.downloadQueue.forEach(item => {\n      let img = new Image()\n      img.addEventListener('load', () => {\n        managerInstance.succesCount += 1\n\n        if (managerInstance.done()) {\n          callback()\n        }\n      }, false)\n      img.addEventListener('error', function () {\n        managerInstance.errorCount += 1\n\n        if (managerInstance.done()) {\n          callback()\n        }\n      }, false)\n      img.src = item.path\n      this.cache[item.name] = img\n    })\n  }\n\n  /**\n   * Get asset by name.\n   *\n   * @param {string} name asset name\n   */\n  getAsset (name) {\n    return this.cache[name]\n  }\n\n  /**\n   * Check if downloading is done.\n   *\n   * @returns {boolean} true when downloading done\n   */\n  done () {\n    return this.downloadQueue.length === this.succesCount + this.errorCount\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/application/AssetManager.js","/**\n * Input manager.\n *\n * @author Daniel Peters\n * @version 2.0\n */\nexport default class KeyboardEventHandler {\n  constructor () {\n    this.initializeKeyHandler()\n    this.initializeTouchHandler()\n\n    // All keystrokes and touch swipes are registered here\n    // This object is then sent to the server to process player movement\n    this.keyActionsRegister = {}\n  }\n\n  /**\n   * Handle keyboard key presses.\n   * Only booleans are set to express the movement direction intention\n   * This allows the separation of keystrokes from actual movement.\n   */\n  initializeKeyHandler () {\n    window.addEventListener('keydown', event => { this.keyActionsRegister[event.key] = true }, false)\n    window.addEventListener('keyup', event => { this.keyActionsRegister[event.key] = false }, false)\n  }\n\n  /**\n   * Maps swipe directions to key press booleans.\n   * Allows touch controls on mobile.\n   */\n  initializeTouchHandler () {\n    // Register the event listeners\n    window.addEventListener('touchstart', handleTouchStart, false)\n    window.addEventListener('touchmove', handleTouchMove, false)\n    window.addEventListener('touchend', handleTouchEnd, false)\n\n    let xDown = null\n    let yDown = null\n    let handlerInstance = this\n\n    function handleTouchStart (evt) {\n      // Prevent divide scrolling\n      evt.preventDefault()\n      xDown = evt.touches[0].clientX\n      yDown = evt.touches[0].clientY\n    }\n\n    function handleTouchMove (evt) {\n      // Prevent divide scrolling\n      evt.preventDefault()\n      // do nothing if no touch direction is registered\n      if (!xDown || !yDown) {\n        return\n      }\n\n      let xUp = evt.touches[0].clientX\n      let yUp = evt.touches[0].clientY\n\n      // Subtract start currently touched location from start location\n      let xDiff = xDown - xUp\n      let yDiff = yDown - yUp\n\n      // Positive values equals left. Negative values equals right\n      if (xDiff > 0) {\n        handlerInstance.keyActionsRegister['a'] = true\n      } else {\n        handlerInstance.keyActionsRegister['d'] = true\n      }\n\n      // Positive = up. Negative = down\n      if (yDiff > 0) {\n        handlerInstance.keyActionsRegister['w'] = true\n      } else {\n        /* down swipe */\n      }\n      /* reset values */\n      xDown = null\n      yDown = null\n    }\n\n    function handleTouchEnd (evt) {\n      // Prevent divide scrolling\n      evt.preventDefault()\n      Object.keys(handlerInstance.keyActionsRegister).forEach(key => { handlerInstance.keyActionsRegister[key] = false })\n    }\n  }\n\n  /**\n   * Get registered keyboard input and touch swipes\n   * @returns {*}\n   */\n  getKeyActionsRegister () {\n    return this.keyActionsRegister\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/application/KeyboardEventHandler.js","/**\n * Sprite sheet definition.\n * TODO: Finish implementation\n */\nexport default class SpriteSheet {\n  /**\n   * Constructor. Sets frame dimensions and calculates number of frames.\n   * @param sourcePath\n   * @param frameWidth\n   * @param frameHeight\n   */\n  constructor (sourcePath, frameWidth, frameHeight) {\n    this.image = new Image()\n    this.frameWidth = frameWidth\n    this.frameHeight = frameHeight\n\n    this.image.addEventListener('load', () => {\n      this.framesPerRow = Math.floor(this.image.width / this.frameWidth)\n    })\n\n    this.image.src = sourcePath\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/graphics/2D/SpriteSheet.js","/**\n * Implements sprite animation using spritesheet.\n * TODO: Finish code\n *\n * @author Daniel Peters\n * @version 0.3\n */\nexport default class Animation {\n  /**\n   * Constructor Sets all animation data.\n   *\n   * @param spriteSheet corresponding sprite sheet\n   * @param speed animation speed\n   * @param start animation start frame\n   * @param end animation end frame\n   */\n  constructor (spriteSheet, speed, start, end) {\n    this.spriteSheet = spriteSheet\n    this.speed = speed\n    this.sequence = []\n    this.currentFrame = 0\n    this.counter = 0\n\n    for (let frame = start; frame <= end; frame++) {\n      this.sequence.push(frame)\n    }\n  }\n\n  /**\n   * Update animation frames.\n   */\n  update () {\n    if (this.counter === (this.speed - 1)) {\n      this.currentFrame = (this.currentFrame + 1) % this.sequence.length\n    }\n    this.counter = (this.counter + 1) % this.speed\n  }\n\n  /**\n   * Draw current frame\n   * @param ctx canvas context\n   * @param x location x\n   * @param y location y\n   * @param width display width\n   * @param height display height\n   */\n  draw (ctx, x, y, width, height) {\n    let row = Math.floor(this.sequence[this.currentFrame] / this.spriteSheet.framesPerRow)\n    let col = Math.floor(this.sequence[this.currentFrame] % this.spriteSheet.framesPerRow)\n    ctx.drawImage(\n      this.spriteSheet.image,\n      col * this.spriteSheet.frameWidth,\n      row * this.spriteSheet.frameHeight,\n      this.spriteSheet.frameWidth,\n      this.spriteSheet.frameHeight,\n      x,\n      y,\n      width,\n      height\n    )\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/graphics/2D/Animation.js"]}