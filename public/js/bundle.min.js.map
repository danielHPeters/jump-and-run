{"version":3,"sources":["webpack:/webpack/bootstrap 8623be0fe32f14fa58a4","webpack:///src/client/app.js","webpack:///src/client/application/AssetManager.js","webpack:///src/client/graphics/2D/SpriteSheet.js","webpack:///src/client/application/InputManager.js","webpack:///src/client/graphics/2D/Animation.js"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","update","socket","emit","inputManager","registeredInputs","window","requestAnimationFrame","draw","players","playerId","spritesLoaded","currentAnimation","ctx","clearRect","canvas","width","height","keys","forEach","key","player","viewport","areaId","animationLeft","animationRight","animationIdle","position","_x","_y","blocks","block","drawImage","assetManager","getSprite","material","x","lives","io","document","getElementById","_InputManager2","default","_AssetManager2","requestAnimFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","element","setTimeout","addEventListener","getContext","queueDownload","loadAll","_Animation2","getSpriteSheet","playSound","textContent","on","engine","id","AssetManager","_classCallCheck","this","cache","audio","sprite","spriteSheet","bufferCache","queue","succesCount","errorCount","initAudioContext","AudioContext","webkitAudioContext","context","e","alert","path","type","push","_this","length","item","loadAudio","loadSprite","loadSpriteSheet","_this2","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","buffer","done","onerror","send","_this3","img","Image","src","_SpriteSheet2","loop","arguments","undefined","sound","createBufferSource","connect","destination","loopEnd","Math","floor","duration","start","SpriteSheet","sourcePath","frameWidth","frameHeight","image","framesPerRow","InputManager","initializeKeyHandler","initializeTouchHandler","event","evt","preventDefault","xDown","touches","clientX","yDown","clientY","xUp","yUp","yDiff","handlerInstance","Animation","speed","end","currentFrame","counter","offset","frame","offsetBottom","_createClass","value","sequence","row"],"mappings":"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","file":"bundle.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8623be0fe32f14fa58a4","'use strict'\r\n\r\nimport AssetManager from './application/AssetManager'\r\nimport InputManager from './application/InputManager'\r\nimport Animation from './graphics/2D/Animation'\r\n\r\nlet socket = io()\r\nlet canvas = document.getElementById('game')\r\nlet inputManager = new InputManager(canvas)\r\nlet assetManager = new AssetManager()\r\nlet playerId // player id is registered here on socket connection\r\nlet ctx // graphics context\r\nlet spritesLoaded = false // set to true when asset manager finishes to start drawing\r\nlet animationRight\r\nlet animationLeft\r\nlet animationIdle\r\nlet currentAnimation\r\n\r\n/**\r\n * Shim for animation loop.\r\n * Selects one that's available or uses fallback with setTimeout.\r\n */\r\nwindow.requestAnimFrame = (() => {\r\n  return window.requestAnimationFrame ||\r\n    window.webkitRequestAnimationFrame ||\r\n    window.mozRequestAnimationFrame ||\r\n    window.oRequestAnimationFrame ||\r\n    window.msRequestAnimationFrame ||\r\n    function (callback, element) {\r\n      window.setTimeout(callback, 1000 / 60)\r\n    }\r\n})()\r\n\r\n/**\r\n * Download all game assets.\r\n */\r\nfunction init () {\r\n  // check if canvas is supported by browser\r\n  if (canvas.getContext) {\r\n    socket.emit('new player')\r\n    ctx = canvas.getContext('2d')\r\n    // Add all sprites and music files to the download queue\r\n    assetManager.queueDownload('ambient', 'assets/audio/ambient/ambient.mp3', 'audio')\r\n    assetManager.queueDownload('jump', 'assets/audio/effects/jump.wav', 'audio')\r\n    assetManager.queueDownload('background', 'assets/textures/background.png', 'texture')\r\n    assetManager.queueDownload('player', 'assets/textures/player.png', 'texture')\r\n    assetManager.queueDownload('stone-block', 'assets/textures/stone-block.jpg', 'texture')\r\n    assetManager.queueDownload('heart', 'assets/textures/heart.png', 'texture')\r\n    assetManager.queueDownload('playerSheet', 'assets/textures/test.png', 'spriteSheet')\r\n    assetManager.loadAll(() => {\r\n      animationRight = new Animation(assetManager.getSpriteSheet('playerSheet'), 3, 3, 6)\r\n      animationLeft = new Animation(assetManager.getSpriteSheet('playerSheet'), 3, 3, 6)\r\n      animationIdle = new Animation(assetManager.getSpriteSheet('playerSheet'), 10, 0, 2)\r\n      currentAnimation = animationLeft\r\n      // Play ambient sound\r\n      assetManager.playSound('ambient', true)\r\n      update()\r\n      // Draw Background only once to improve performance\r\n      document.getElementById('background').getContext('2d').drawImage(assetManager.getSprite('background'), 0, 0, canvas.width, canvas.height)\r\n      // tells socket.on(state) that all sprites needed for drawing are downloaded\r\n      spritesLoaded = true\r\n    })\r\n  } else {\r\n    document.getElementById('unsupported').textContent = 'Please update your browser or download another one which supports HTML5'\r\n  }\r\n}\r\n\r\n/**\r\n * Sends user input to the server.\r\n */\r\nfunction update () {\r\n  socket.emit('movement', inputManager.registeredInputs)\r\n  // Request new frame when ready. Allows the game to play in a loop in approximately 60fps\r\n  window.requestAnimationFrame(() => update())\r\n}\r\n\r\nfunction draw (players) {\r\n  if (playerId && players[playerId] && spritesLoaded) {\r\n    currentAnimation.update()\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\r\n    Object.keys(players).forEach(key => {\r\n      const player = players[key]\r\n      // Make sure to only draw players in the same area\r\n      if (player.viewport.areaId === players[playerId].viewport.areaId) {\r\n        if (player.registeredInputs['a']) {\r\n          currentAnimation = animationLeft\r\n        }\r\n        if (player.registeredInputs['d']) {\r\n          currentAnimation = animationRight\r\n        }\r\n        if (!player.registeredInputs['d'] && !player.registeredInputs['a']) {\r\n          currentAnimation = animationIdle\r\n        }\r\n        currentAnimation.draw(ctx, player.position._x, player.position._y, player.width, player.height)\r\n      }\r\n    })\r\n    // Draw all blocks\r\n    players[playerId].viewport.blocks.forEach(block => {\r\n      ctx.drawImage(assetManager.getSprite(block.material.name), block.position._x, block.position._y, block.width, block.height)\r\n    })\r\n    // Display health\r\n    let x = canvas.width - 35\r\n    let y = 5\r\n    for (let i = 0; i < players[playerId].lives; i++) {\r\n      ctx.drawImage(assetManager.getSprite('heart'), x, y, 30, 30)\r\n      x -= 30\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * modern browser equivalent of jQuery $(document).ready()\r\n */\r\ndocument.addEventListener('DOMContentLoaded', init())\r\n\r\n/**\r\n * Initialize player id on socket connection\r\n */\r\nsocket.on('connect', () => {\r\n  // Tell server to add this player\r\n  socket.emit('new player')\r\n  // remember socket id to identify current player when drawing\r\n  playerId = socket.io.engine.id\r\n})\r\n\r\n/**\r\n * Listen to server sending objects to draw.\r\n * Contains the drawing loop\r\n */\r\nsocket.on('state', players => {\r\n  draw(players)\r\n})\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/app.js","import SpriteSheet from './../graphics/2D/SpriteSheet'\r\n\r\n/**\r\n * Asset manager.\r\n *\r\n * @author Daniel Peters\r\n * @version 2.0\r\n */\r\nexport default class AssetManager {\r\n  constructor () {\r\n    this.cache = {\r\n      audio: [],\r\n      sprite: [],\r\n      spriteSheet: []\r\n    }\r\n    this.bufferCache = []\r\n    this.queue = []\r\n    this.succesCount = 0\r\n    this.errorCount = 0\r\n    this.initAudioContext()\r\n  }\r\n\r\n  initAudioContext () {\r\n    try {\r\n      // Fix for browsers using prefixes\r\n      window.AudioContext = window.AudioContext || window.webkitAudioContext\r\n      this.context = new AudioContext()\r\n    } catch (e) {\r\n      alert('Web Audio API is not supported in this browser')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Queue an audio file for download.\r\n   *\r\n   * @param {string} name name of the audio file\r\n   * @param {string} path location of the audio file\r\n   * @param {string} type of file\r\n   */\r\n  queueDownload (name, path, type) {\r\n    this.queue.push({name: name, path: path, type: type})\r\n  }\r\n\r\n  /**\r\n   * Download all files and execute callback function when done.\r\n   *\r\n   * @param callback function to be executed when downloading is done\r\n   */\r\n  loadAll (callback) {\r\n    if (this.queue.length === 0) {\r\n      callback()\r\n    }\r\n    this.queue.forEach(item => {\r\n      if (item.type === 'audio') {\r\n        this.loadAudio(item, callback)\r\n      } else if (item.type === 'texture') {\r\n        this.loadSprite(item, callback)\r\n      } else if (item.type === 'spriteSheet') {\r\n        this.loadSpriteSheet(item, callback)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Build an AJAX Request to loadAudio audio file into the buffer cache.\r\n   *\r\n   * @param {{}} item object with name of file and path to file\r\n   * @param callback function to execute on done\r\n   */\r\n  loadAudio (item, callback) {\r\n    let request = new XMLHttpRequest()\r\n\r\n    request.open('GET', item.path, true)\r\n    request.responseType = 'arraybuffer'\r\n\r\n    // Decode asynchronously\r\n    request.onload = () => {\r\n      this.context.decodeAudioData(\r\n        request.response, buffer => {\r\n          this.cache.audio[item.name] = buffer\r\n          this.succesCount += 1\r\n          if (this.done()) {\r\n            callback()\r\n          }\r\n        }\r\n      )\r\n    }\r\n\r\n    // Register error\r\n    request.onerror = () => {\r\n      this.errorCount += 1\r\n      if (this.done()) {\r\n        callback()\r\n      }\r\n    }\r\n    request.send()\r\n  }\r\n\r\n  /**\r\n   * Load simple sprites as image.\r\n   *\r\n   * @param item sprite info\r\n   * @param callback called upon downloading all\r\n   */\r\n  loadSprite (item, callback) {\r\n    let img = new Image()\r\n    img.addEventListener('load', () => {\r\n      this.succesCount += 1\r\n\r\n      if (this.done()) {\r\n        callback()\r\n      }\r\n    }, false)\r\n    img.addEventListener('error', () => {\r\n      this.errorCount += 1\r\n\r\n      if (this.done()) {\r\n        callback()\r\n      }\r\n    }, false)\r\n    img.src = item.path\r\n    this.cache.sprite[item.name] = img\r\n  }\r\n\r\n  /**\r\n   * Load sprites sheet.\r\n   *\r\n   * @param item sprite sheet info\r\n   * @param callback called upon downloading all\r\n   */\r\n  loadSpriteSheet (item, callback) {\r\n    this.cache.spriteSheet[item.name] = new SpriteSheet(item.path, 32, 64)\r\n    this.succesCount += 1\r\n    if (this.done()) {\r\n      callback()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get sprite by name.\r\n   *\r\n   * @param {string} name sprite name\r\n   */\r\n  getSprite (name) {\r\n    return this.cache.sprite[name]\r\n  }\r\n\r\n  /**\r\n   * Get sprite sheet by name.\r\n   *\r\n   * @param {string} name sprite sheet name\r\n   */\r\n  getSpriteSheet (name) {\r\n    return this.cache.spriteSheet[name]\r\n  }\r\n\r\n  /**\r\n   * Create an audio buffer source node from cached buffer.\r\n   * Send it to the destination of the audio context and play it.\r\n   *\r\n   * @param name filename\r\n   * @param loop set to true for looped sounds like ambient music\r\n   */\r\n  playSound (name, loop = false) {\r\n    let sound = this.context.createBufferSource()\r\n\r\n    sound.buffer = this.cache.audio[name]\r\n    sound.connect(this.context.destination)\r\n    if (loop) {\r\n      sound.loop = loop\r\n      sound.loopEnd = Math.floor(sound.buffer.duration)\r\n    }\r\n    sound.start(0)\r\n  }\r\n\r\n  /**\r\n   * Check if downloading is finished.\r\n   * @returns {boolean}\r\n   */\r\n  done () {\r\n    return this.queue.length === this.succesCount + this.errorCount\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/application/AssetManager.js","/**\r\n * Sprite sheet definition.\r\n */\r\nexport default class SpriteSheet {\r\n  /**\r\n   * Constructor. Sets frame dimensions and calculates number of frames.\r\n   * @param sourcePath\r\n   * @param frameWidth\r\n   * @param frameHeight\r\n   */\r\n  constructor (sourcePath, frameWidth, frameHeight) {\r\n    this.image = new Image()\r\n    this.frameWidth = frameWidth\r\n    this.frameHeight = frameHeight\r\n\r\n    this.image.addEventListener('load', () => {\r\n      this.framesPerRow = Math.floor(this.image.width / this.frameWidth)\r\n    })\r\n\r\n    this.image.src = sourcePath\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/graphics/2D/SpriteSheet.js","/**\r\n * Input manager.\r\n *\r\n * @author Daniel Peters\r\n * @version 2.0\r\n */\r\nexport default class InputManager {\r\n  constructor () {\r\n    this.initializeKeyHandler()\r\n    this.initializeTouchHandler()\r\n\r\n    // All keystrokes and touch swipes are registered here\r\n    // This object is then sent to the server to process player movement\r\n    this.registeredInputs = {}\r\n  }\r\n\r\n  /**\r\n   * Handle keyboard key presses.\r\n   * Only booleans are set to express the movement direction intention\r\n   * This allows the separation of keystrokes from actual movement.\r\n   */\r\n  initializeKeyHandler () {\r\n    window.addEventListener('keydown', event => { this.registeredInputs[event.key] = true }, false)\r\n    window.addEventListener('keyup', event => { this.registeredInputs[event.key] = false }, false)\r\n  }\r\n\r\n  /**\r\n   * Maps swipe directions to key press booleans.\r\n   * Allows touch controls on mobile.\r\n   */\r\n  initializeTouchHandler () {\r\n    // Register the event listeners\r\n    window.addEventListener('touchstart', handleTouchStart, false)\r\n    window.addEventListener('touchmove', handleTouchMove, false)\r\n    window.addEventListener('touchend', handleTouchEnd, false)\r\n\r\n    let xDown = null\r\n    let yDown = null\r\n    let handlerInstance = this\r\n\r\n    function handleTouchStart (evt) {\r\n      // Prevent divide scrolling\r\n      evt.preventDefault()\r\n      xDown = evt.touches[0].clientX\r\n      yDown = evt.touches[0].clientY\r\n    }\r\n\r\n    function handleTouchMove (evt) {\r\n      // Prevent divide scrolling\r\n      evt.preventDefault()\r\n      // do nothing if no touch direction is registered\r\n      if (!xDown || !yDown) {\r\n        return\r\n      }\r\n\r\n      let xUp = evt.touches[0].clientX\r\n      let yUp = evt.touches[0].clientY\r\n\r\n      // Subtract start currently touched location from start location\r\n      let xDiff = xDown - xUp\r\n      let yDiff = yDown - yUp\r\n\r\n      // Positive values equals left. Negative values equals right\r\n      if (xDiff > 0) {\r\n        handlerInstance.registeredInputs['a'] = true\r\n      } else {\r\n        handlerInstance.registeredInputs['d'] = true\r\n      }\r\n\r\n      // Positive = up. Negative = down\r\n      if (yDiff > 0) {\r\n        handlerInstance.registeredInputs['w'] = true\r\n      } else {\r\n        /* down swipe */\r\n      }\r\n      /* reset values */\r\n      xDown = null\r\n      yDown = null\r\n    }\r\n\r\n    function handleTouchEnd (evt) {\r\n      // Prevent divide scrolling\r\n      evt.preventDefault()\r\n      Object.keys(handlerInstance.registeredInputs).forEach(key => { handlerInstance.registeredInputs[key] = false })\r\n    }\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/application/InputManager.js","/**\r\n * Implements sprite animation using sprite sheet.\r\n *\r\n * @author Daniel Peters\r\n * @version 0.3\r\n */\r\nexport default class Animation {\r\n  /**\r\n   * Constructor Sets all animation data.\r\n   *\r\n   * @param spriteSheet corresponding sprite sheet\r\n   * @param speed animation speed\r\n   * @param start animation start frame\r\n   * @param end animation end frame\r\n   */\r\n  constructor (spriteSheet, speed, start, end) {\r\n    this.spriteSheet = spriteSheet\r\n    this.speed = speed\r\n    this.sequence = []\r\n    this.currentFrame = 0\r\n    this.counter = 0\r\n    this.offset = 10\r\n\r\n    for (let frame = start; frame <= end; frame++) {\r\n      this.sequence.push(frame)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update animation frames.\r\n   */\r\n  update () {\r\n    if (this.counter === (this.speed - 1)) {\r\n      this.currentFrame = (this.currentFrame + 1) % this.sequence.length\r\n    }\r\n    this.counter = (this.counter + 1) % this.speed\r\n  }\r\n\r\n  /**\r\n   * Draw current frame\r\n   * @param ctx canvas context\r\n   * @param x location x\r\n   * @param y location y\r\n   * @param width display width\r\n   * @param height display height\r\n   */\r\n  draw (ctx, x, y, width, height) {\r\n    let row = Math.floor(this.sequence[this.currentFrame] / this.spriteSheet.framesPerRow)\r\n    let col = Math.floor(this.sequence[this.currentFrame] % this.spriteSheet.framesPerRow)\r\n    ctx.drawImage(\r\n      this.spriteSheet.image,\r\n      col * this.spriteSheet.frameWidth,\r\n      row * this.spriteSheet.frameHeight,\r\n      this.spriteSheet.frameWidth,\r\n      this.spriteSheet.frameHeight - this.offset,\r\n      x,\r\n      y,\r\n      width,\r\n      height\r\n    )\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/client/graphics/2D/Animation.js"]}